{"version":3,"sources":["CardContainer.tsx"],"names":["CardContainer","active","cardOverlayEnabled","cardShadowEnabled","cardStyle","cardStyleInterpolator","closing","gesture","focused","gestureDirection","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","getPreviousRoute","headerMode","headerShown","headerStyleInterpolator","headerTransparent","headerHeight","onHeaderHeightChange","index","layout","onCloseRoute","onOpenRoute","onPageChangeCancel","onPageChangeConfirm","onPageChangeStart","onTransitionEnd","onTransitionStart","previousScene","renderHeader","renderScene","safeAreaInsetBottom","safeAreaInsetLeft","safeAreaInsetRight","safeAreaInsetTop","scene","state","transitionSpec","React","useEffect","handleOpen","route","handleClose","handleTransitionStart","insets","top","right","bottom","left","colors","progress","current","next","marginTop","backgroundColor","background","StyleSheet","absoluteFill","styles","container","mode","scenes","styleInterpolator","onContentHeightChange","memo","create","flex","flexDirection"],"mappings":"wPAAA,oDACA,yCAGA,oDACA,4FACA,0E,oHAyDA,QAASA,CAAAA,aAAT,MAuCU,IAtCRC,CAAAA,MAsCQ,MAtCRA,MAsCQ,CArCRC,kBAqCQ,MArCRA,kBAqCQ,CApCRC,iBAoCQ,MApCRA,iBAoCQ,CAnCRC,SAmCQ,MAnCRA,SAmCQ,CAlCRC,qBAkCQ,MAlCRA,qBAkCQ,CAjCRC,OAiCQ,MAjCRA,OAiCQ,CAhCRC,OAgCQ,MAhCRA,OAgCQ,CA/BRC,OA+BQ,MA/BRA,OA+BQ,CA9BRC,gBA8BQ,MA9BRA,gBA8BQ,CA7BRC,cA6BQ,MA7BRA,cA6BQ,CA5BRC,uBA4BQ,MA5BRA,uBA4BQ,CA3BRC,qBA2BQ,MA3BRA,qBA2BQ,CA1BRC,gBA0BQ,MA1BRA,gBA0BQ,CAzBRC,UAyBQ,MAzBRA,UAyBQ,CAxBRC,WAwBQ,MAxBRA,WAwBQ,CAvBRC,uBAuBQ,MAvBRA,uBAuBQ,CAtBRC,iBAsBQ,MAtBRA,iBAsBQ,CArBRC,YAqBQ,MArBRA,YAqBQ,CApBRC,oBAoBQ,MApBRA,oBAoBQ,CAnBRC,KAmBQ,MAnBRA,KAmBQ,CAlBRC,MAkBQ,MAlBRA,MAkBQ,CAjBRC,YAiBQ,MAjBRA,YAiBQ,CAhBRC,WAgBQ,MAhBRA,WAgBQ,CAfRC,kBAeQ,MAfRA,kBAeQ,CAdRC,mBAcQ,MAdRA,mBAcQ,CAbRC,iBAaQ,MAbRA,iBAaQ,CAZRC,eAYQ,MAZRA,eAYQ,CAXRC,iBAWQ,MAXRA,iBAWQ,CAVRC,aAUQ,MAVRA,aAUQ,CATRC,YASQ,MATRA,YASQ,CARRC,WAQQ,MARRA,WAQQ,CAPRC,mBAOQ,MAPRA,mBAOQ,CANRC,iBAMQ,MANRA,iBAMQ,CALRC,kBAKQ,MALRA,kBAKQ,CAJRC,gBAIQ,MAJRA,gBAIQ,CAHRC,KAGQ,MAHRA,KAGQ,CAFRC,KAEQ,MAFRA,KAEQ,CADRC,cACQ,MADRA,cACQ,CACRC,KAAK,CAACC,SAAN,CAAgB,UAAM,CACpBf,mBAAmB,MAAnB,QAAAA,mBAAmB,GACpB,CAFD,CAEG,CAACxB,MAAD,CAASwB,mBAAT,CAFH,EAIA,GAAMgB,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACvBd,eAAe,MAAf,QAAAA,eAAe,CAAG,CAAEe,KAAK,CAAEN,KAAK,CAACM,KAAf,CAAH,CAA2B,KAA3B,CAAf,CACAnB,WAAW,CAAC,CAAEmB,KAAK,CAAEN,KAAK,CAACM,KAAf,CAAD,CAAX,CACD,CAHD,CAKA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACxBhB,eAAe,MAAf,QAAAA,eAAe,CAAG,CAAEe,KAAK,CAAEN,KAAK,CAACM,KAAf,CAAH,CAA2B,IAA3B,CAAf,CACApB,YAAY,CAAC,CAAEoB,KAAK,CAAEN,KAAK,CAACM,KAAf,CAAD,CAAZ,CACD,CAHD,CAKA,GAAME,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,OAAuC,IAApCtC,CAAAA,OAAoC,OAApCA,OAAoC,CACnE,GAAIL,MAAM,EAAIK,OAAd,CAAuB,CACrBmB,mBAAmB,MAAnB,QAAAA,mBAAmB,GACpB,CAFD,IAEO,CACLD,kBAAkB,MAAlB,QAAAA,kBAAkB,GACnB,CAEDI,iBAAiB,MAAjB,QAAAA,iBAAiB,CAAG,CAAEc,KAAK,CAAEN,KAAK,CAACM,KAAf,CAAH,CAA2BpC,OAA3B,CAAjB,CACD,CARD,CAUA,GAAMuC,CAAAA,MAAM,CAAG,CACbC,GAAG,CAAEX,gBADQ,CAEbY,KAAK,CAAEb,kBAFM,CAGbc,MAAM,CAAEhB,mBAHK,CAIbiB,IAAI,CAAEhB,iBAJO,CAAf,CAzBQ,cAgCW,wBAhCX,CAgCAiB,MAhCA,WAgCAA,MAhCA,CAkCR,MACE,qBAAC,aAAD,EACE,KAAK,CAAE9B,KADT,CAEE,gBAAgB,CAAEX,gBAFpB,CAGE,MAAM,CAAEY,MAHV,CAIE,MAAM,CAAEwB,MAJV,CAKE,OAAO,CAAEtC,OALX,CAME,OAAO,CAAE6B,KAAK,CAACe,QAAN,CAAeC,OAN1B,CAOE,IAAI,CAAEhB,KAAK,CAACe,QAAN,CAAeE,IAPvB,CAQE,OAAO,CAAE/C,OARX,CASE,MAAM,CAAEmC,UATV,CAUE,OAAO,CAAEE,WAVX,CAWE,cAAc,CAAEzC,kBAXlB,CAYE,aAAa,CAAEC,iBAZjB,CAaE,iBAAiB,CAAEyC,qBAbrB,CAcE,cAAc,CAAElB,iBAdlB,CAeE,iBAAiB,CAAEF,kBAfrB,CAgBE,cAAc,CAAEd,cAhBlB,CAiBE,uBAAuB,CAAEC,uBAjB3B,CAkBE,qBAAqB,CAAEC,qBAlBzB,CAmBE,cAAc,CAAE0B,cAnBlB,CAoBE,iBAAiB,CAAEjC,qBApBrB,CAqBE,2BAA2B,CAAE,CAACG,OArBhC,CAsBE,yBAAyB,CAAEA,OAAO,CAAG,MAAH,CAAY,qBAtBhD,CAuBE,aAAa,CAAC,UAvBhB,CAwBE,cAAc,CACZM,UAAU,GAAK,OAAf,EAA0B,CAACG,iBAA3B,EAAgDF,WAAW,GAAK,KAAhE,CACI,CAAEuC,SAAS,CAAEpC,YAAb,CADJ,CAEI,IA3BR,CA6BE,YAAY,CAAE,CAAC,CAAEqC,eAAe,CAAEL,MAAM,CAACM,UAA1B,CAAD,CAAyCpD,SAAzC,CA7BhB,CA8BE,KAAK,CAAEqD,wBAAWC,YA9BpB,kDAgCE,oBAAC,iBAAD,EAAM,KAAK,CAAEC,MAAM,CAACC,SAApB,kDACE,oBAAC,iBAAD,EAAM,KAAK,CAAED,MAAM,CAACvB,KAApB,kDACE,oBAAC,4BAAD,CAAqB,QAArB,EAA8B,KAAK,CAAElB,YAArC,kDACGa,WAAW,CAAC,CAAEW,KAAK,CAAEN,KAAK,CAACM,KAAf,CAAD,CADd,CADF,CADF,CAMG5B,UAAU,GAAK,QAAf,CACGgB,YAAY,CAAC,CACX+B,IAAI,CAAE,QADK,CAEXxC,MAAM,CAANA,MAFW,CAGXwB,MAAM,CAANA,MAHW,CAIXiB,MAAM,CAAE,CAACjC,aAAD,CAAgBO,KAAhB,CAJG,CAKXC,KAAK,CAALA,KALW,CAMXxB,gBAAgB,CAAhBA,gBANW,CAOXkD,iBAAiB,CAAE/C,uBAPR,CAQXgD,qBAAqB,CAAE7C,oBARZ,CAAD,CADf,CAWG,IAjBN,CAhCF,CADF,CAsDD,C,aAEcoB,KAAK,CAAC0B,IAAN,CAAWjE,aAAX,C,0BAEf,GAAM2D,CAAAA,MAAM,CAAGF,wBAAWS,MAAX,CAAkB,CAC/BN,SAAS,CAAE,CACTO,IAAI,CAAE,CADG,CAETC,aAAa,CAAE,gBAFN,CADoB,CAK/BhC,KAAK,CAAE,CACL+B,IAAI,CAAE,CADD,CALwB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport { NavigationState as StackNavigationState } from 'react-navigation';\nimport { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\nimport HeaderHeightContext from '../../utils/HeaderHeightContext';\nimport useTheme from '../../../utils/useTheme';\nimport {\n  Route,\n  Scene,\n  Layout,\n  StackHeaderMode,\n  TransitionPreset,\n} from '../../types';\n\ntype Props = TransitionPreset & {\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  previousScene?: Scene<Route<string>>;\n  scene: Scene<Route<string>>;\n  state: StackNavigationState;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  cardOverlayEnabled?: boolean;\n  cardShadowEnabled?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart?: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd?: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n  gestureEnabled?: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact?: number;\n  headerMode: StackHeaderMode;\n  headerShown?: boolean;\n  headerTransparent?: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n};\n\nfunction CardContainer({\n  active,\n  cardOverlayEnabled,\n  cardShadowEnabled,\n  cardStyle,\n  cardStyleInterpolator,\n  closing,\n  gesture,\n  focused,\n  gestureDirection,\n  gestureEnabled,\n  gestureResponseDistance,\n  gestureVelocityImpact,\n  getPreviousRoute,\n  headerMode,\n  headerShown,\n  headerStyleInterpolator,\n  headerTransparent,\n  headerHeight,\n  onHeaderHeightChange,\n  index,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onPageChangeCancel,\n  onPageChangeConfirm,\n  onPageChangeStart,\n  onTransitionEnd,\n  onTransitionStart,\n  previousScene,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n  state,\n  transitionSpec,\n}: Props) {\n  React.useEffect(() => {\n    onPageChangeConfirm?.();\n  }, [active, onPageChangeConfirm]);\n\n  const handleOpen = () => {\n    onTransitionEnd?.({ route: scene.route }, false);\n    onOpenRoute({ route: scene.route });\n  };\n\n  const handleClose = () => {\n    onTransitionEnd?.({ route: scene.route }, true);\n    onCloseRoute({ route: scene.route });\n  };\n\n  const handleTransitionStart = ({ closing }: { closing: boolean }) => {\n    if (active && closing) {\n      onPageChangeConfirm?.();\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route: scene.route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  return (\n    <Card\n      index={index}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransitionStart={handleTransitionStart}\n      onGestureBegin={onPageChangeStart}\n      onGestureCanceled={onPageChangeCancel}\n      gestureEnabled={gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents=\"box-none\"\n      containerStyle={\n        headerMode === 'float' && !headerTransparent && headerShown !== false\n          ? { marginTop: headerHeight }\n          : null\n      }\n      contentStyle={[{ backgroundColor: colors.background }, cardStyle] as any}\n      style={StyleSheet.absoluteFill}\n    >\n      <View style={styles.container}>\n        <View style={styles.scene}>\n          <HeaderHeightContext.Provider value={headerHeight}>\n            {renderScene({ route: scene.route })}\n          </HeaderHeightContext.Provider>\n        </View>\n        {headerMode === 'screen'\n          ? renderHeader({\n              mode: 'screen',\n              layout,\n              insets,\n              scenes: [previousScene, scene],\n              state,\n              getPreviousRoute,\n              styleInterpolator: headerStyleInterpolator,\n              onContentHeightChange: onHeaderHeightChange,\n            })\n          : null}\n      </View>\n    </Card>\n  );\n}\n\nexport default React.memo(CardContainer);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]}